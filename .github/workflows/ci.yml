name: Branestawm CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'

jobs:
  # Lint and Code Quality
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run custom linter
        run: npm run lint

      - name: Check TypeScript compilation
        run: |
          if [ -f tsconfig.json ]; then
            npx tsc --noEmit --skipLibCheck
          fi

      - name: Security audit
        run: |
          # Check for potential security issues
          echo "Running security checks..."
          grep -r "eval\|innerHTML.*\$" --include="*.js" --include="*.ts" . || true
          
      - name: Code style check
        run: |
          echo "Checking code style..."
          node linter.js --fix

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run tests
        run: npm test

      - name: Generate test report
        if: always()
        run: |
          echo "Test execution completed"
          # Future: Upload test results or coverage

  # Build and Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build extension
        run: |
          npm run build:prod
          echo "Build completed successfully"

      - name: Verify build output
        run: |
          if [ -d "build" ]; then
            echo "Build directory exists"
            ls -la build/
            
            # Check critical files exist
            if [ ! -f "build/manifest.json" ]; then
              echo "ERROR: manifest.json missing"
              exit 1
            fi
            
            if [ ! -f "build/background.js" ]; then
              echo "ERROR: background.js missing"
              exit 1
            fi
            
            echo "All critical files present"
          else
            echo "ERROR: Build directory not found"
            exit 1
          fi

      - name: Package extension
        run: |
          cd build
          if command -v zip &> /dev/null; then
            zip -r ../branestawm-extension-${{ github.sha }}.zip .
            echo "Extension packaged successfully"
          else
            echo "ZIP command not available, skipping packaging"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build-${{ github.sha }}
          path: |
            build/
            branestawm-extension-${{ github.sha }}.zip
          retention-days: 30

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: extension-build-${{ github.sha }}

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          # Check file sizes
          if [ -d "build" ]; then
            echo "Build size analysis:"
            du -sh build/
            du -sh build/* | sort -hr
            
            # Check if any JS files are too large
            find build -name "*.js" -size +1M -exec echo "WARNING: Large JS file found: {}" \;
            
            # Check total extension size
            TOTAL_SIZE=$(du -sb build | cut -f1)
            MAX_SIZE=52428800  # 50MB Chrome Web Store limit
            
            if [ $TOTAL_SIZE -gt $MAX_SIZE ]; then
              echo "ERROR: Extension size ($TOTAL_SIZE bytes) exceeds Chrome Web Store limit"
              exit 1
            fi
            
            echo "Extension size: $TOTAL_SIZE bytes (within limits)"
          fi

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: extension-build-${{ github.sha }}

      - name: Security scan
        run: |
          echo "Running security scan..."
          
          # Check for common security issues
          echo "Checking for potential security vulnerabilities..."
          
          # Check for console.log in production build
          if grep -r "console\.log" build/ --include="*.js"; then
            echo "WARNING: console.log found in production build"
          fi
          
          # Check for eval usage
          if grep -r "\beval\s*(" build/ --include="*.js"; then
            echo "ERROR: eval() found in build - security risk!"
            exit 1
          fi
          
          # Check for innerHTML without escaping
          if grep -r "\.innerHTML\s*=" build/ --include="*.js" | grep -v "escapeHtml"; then
            echo "WARNING: Unescaped innerHTML usage detected"
          fi
          
          # Check manifest permissions
          if [ -f "build/manifest.json" ]; then
            echo "Checking manifest permissions..."
            cat build/manifest.json | jq '.permissions' || true
            
            # Warn about broad permissions
            if grep -q '"<all_urls>"' build/manifest.json; then
              echo "WARNING: Extension requests access to all URLs"
            fi
          fi
          
          echo "Security scan completed"

  # Deployment (only on release)
  deploy:
    name: Deploy to Chrome Web Store
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: extension-build-${{ github.sha }}

      - name: Prepare for deployment
        run: |
          echo "Preparing for Chrome Web Store deployment..."
          
          # Verify we have a ZIP file
          if [ ! -f "branestawm-extension-${{ github.sha }}.zip" ]; then
            echo "ERROR: Extension ZIP file not found"
            exit 1
          fi
          
          # Verify manifest version matches release tag
          if [ -f "build/manifest.json" ]; then
            MANIFEST_VERSION=$(cat build/manifest.json | jq -r '.version')
            RELEASE_TAG="${{ github.event.release.tag_name }}"
            RELEASE_VERSION="${RELEASE_TAG#v}"  # Remove 'v' prefix if present
            
            if [ "$MANIFEST_VERSION" != "$RELEASE_VERSION" ]; then
              echo "ERROR: Manifest version ($MANIFEST_VERSION) doesn't match release tag ($RELEASE_VERSION)"
              exit 1
            fi
            
            echo "Version verification passed: $MANIFEST_VERSION"
          fi

      - name: Deploy to Chrome Web Store
        run: |
          echo "üöÄ Deploying Branestawm Extension to Chrome Web Store"
          echo "Release: ${{ github.event.release.tag_name }}"
          echo "Build: ${{ github.sha }}"
          
          # Note: Actual deployment would require Chrome Web Store API credentials
          # For now, we just prepare the deployment package
          echo "Deployment package ready: branestawm-extension-${{ github.sha }}.zip"
          
          # Future: Use chrome-webstore-upload or similar tool
          # with secrets.CHROME_EXTENSION_ID, secrets.CHROME_CLIENT_ID, etc.

      - name: Create deployment summary
        run: |
          echo "## üéâ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: branestawm-extension-${{ github.sha }}.zip" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Ready for Chrome Web Store" >> $GITHUB_STEP_SUMMARY

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.event_name == 'release'
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful for ${{ github.event.release.tag_name }}"
          else
            echo "‚ùå Deployment failed for ${{ github.event.release.tag_name }}"
          fi
          
          # Future: Send notifications via Slack, Discord, email, etc.