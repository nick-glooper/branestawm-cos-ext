console.log("🔍 OFFSCREEN DEBUG: RAG SCRIPT LOADING STARTED...");console.log("🔍 OFFSCREEN DEBUG: Date:",new Date().toISOString());try{chrome.runtime.sendMessage({type:"LOCAL_AI_STATUS",status:"Offscreen script loading...",progress:1,ready:!1}),console.log("🔍 OFFSCREEN DEBUG: Initial status message sent")}catch(e){console.log("🔍 OFFSCREEN DEBUG: Failed to send initial status:",e)}console.log("🔍 OFFSCREEN DEBUG: Basic script execution working");try{chrome.runtime.sendMessage({type:"LOCAL_AI_STATUS",status:"Offscreen HTML loaded!",progress:.5,ready:!1}),console.log("🔍 OFFSCREEN DEBUG: HTML status message sent")}catch(e){console.log("🔍 OFFSCREEN DEBUG: Failed to send HTML status:",e)}let F=!1,n=!1;console.log("🔍 OFFSCREEN DEBUG: Setting up Web Worker for transformers.js...");const c=document.getElementById("status"),E=document.getElementById("progressBar"),m=document.getElementById("details");function l(e,t=null,o=null){c&&(c.textContent=e),t!==null&&E&&(E.style.width=`${t}%`),o&&m&&(m.textContent=o),e&&e.includes("Loading")&&e.includes("model")&&(y(),S(e)),chrome.runtime.sendMessage({type:"LOCAL_AI_STATUS",status:e,progress:t,ready:n})}function y(){const e=document.getElementById("modelProgress"),t=document.getElementById("downloadInfo");e&&e.style.display==="none"&&(e.style.display="block",t&&(t.style.display="block"))}function S(e,t){const o={classifier:{element:"scout",name:"Scout",emoji:"🔍"},embedding:{element:"indexer",name:"Indexer",emoji:"📊"},NER:{element:"extractor",name:"Extractor",emoji:"🏷️"},generative:{element:"synthesizer",name:"Synthesizer",emoji:"✨"}};let s=null;for(const[a,r]of Object.entries(o))if(e.toLowerCase().includes(a.toLowerCase())){s=r;break}if(s){const a=document.getElementById(`${s.element}Progress`),r=document.getElementById(`${s.element}Status`);a&&r&&(e.includes("Loading")?(a.style.width="50%",r.textContent="Downloading...",r.className="model-status downloading"):e.includes("loaded")&&(a.style.width="100%",r.textContent="Ready ✅",r.className="model-status complete"))}}let d=null,u=!1;function g(){console.log("🚀 OFFSCREEN DEBUG: Creating Web LLM Worker (latest models)...");try{d=new Worker(chrome.runtime.getURL("webllm-worker.js"),{type:"module"}),d.onmessage=function(t){const o=t.data,{type:s}=o;switch(s){case"status":l(o.message,o.progress);break;case"model-progress":l(o.text,o.progress);break;case"init-complete":o.success?(console.log("🚀 OFFSCREEN DEBUG: All Web LLM models initialized successfully!"),F=!0,n=!0,l("✅ Local AI ready with Web LLM!",100,o.message),chrome.runtime.sendMessage({type:"LOCAL_AI_STATUS",status:"✅ All 4 AI models ready with Web LLM!",progress:100,ready:!0})):(console.error("🚀 OFFSCREEN DEBUG: Web LLM model initialization failed:",o.error),i(new Error(o.error)));break;case"error":console.error("🚀 OFFSCREEN DEBUG: Web LLM Worker error:",o.error),i(new Error(o.error));break;default:console.log("🚀 OFFSCREEN DEBUG: Unknown message type from Web LLM Worker:",s)}},d.onerror=function(t){console.error("🚀 OFFSCREEN DEBUG: Web LLM Worker error:",t),i(t)};const e=chrome.runtime.getURL("");console.log("🚀 OFFSCREEN DEBUG: Extension base URL:",e),d.postMessage({type:"init",data:{extensionBaseURL:e}})}catch(e){console.error("🚀 OFFSCREEN DEBUG: Failed to create Web LLM Worker:",e),i(e)}}function i(e){console.error("🔍 OFFSCREEN DEBUG: Transformers.js Web Worker failed:",e),l("❌ AI model initialization failed",0,e.message),chrome.runtime.sendMessage({type:"LOCAL_AI_ERROR",error:e.message||"Transformers.js Web Worker failed"})}try{chrome.runtime.sendMessage({type:"LOCAL_AI_STATUS",status:"Setting up transformers.js...",progress:2,ready:!1})}catch(e){console.log("🔍 OFFSCREEN DEBUG: Failed to send setup status:",e)}console.log("🔍 OFFSCREEN DEBUG: Starting Web Worker transformers.js loading...");try{chrome.runtime.sendMessage({type:"LOCAL_AI_STATUS",status:"Starting Web Worker approach...",progress:3,ready:!1})}catch(e){console.log("🔍 OFFSCREEN DEBUG: Failed to send Web Worker status:",e)}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",g):g();chrome.runtime.onMessage.addListener((e,t,o)=>{switch(console.log("🔍 OFFSCREEN DEBUG: Received message:",e.type,e),e.type){case"INIT_LOCAL_AI":console.log("🔍 OFFSCREEN DEBUG: Starting model initialization..."),o({success:!0,ready:n});break;case"GENERATE_EMBEDDING":return o({success:!1,error:"AI models not ready"}),!0;case"GENERATE_TEXT":return o({success:!1,error:"AI models not ready"}),!0;case"CHECK_STATUS":o({ready:n,workerReady:u,status:n?"Ready":"Not ready"});break;case"CHECK_LOCAL_AI_STATUS":o({ready:n,workerReady:u,status:n?"Ready":"Not ready"});break;default:console.log("Unknown message type:",e.type)}});l("Ready to load model",0,'Click "Setup Local AI" to begin');console.log("🔍 OFFSCREEN DEBUG: Document ready, sending OFFSCREEN_READY message...");chrome.runtime.sendMessage({type:"OFFSCREEN_READY"}).then(()=>{console.log("🔍 OFFSCREEN DEBUG: OFFSCREEN_READY message sent successfully")}).catch(e=>{console.log("🔍 OFFSCREEN DEBUG: Failed to send OFFSCREEN_READY:",e)});console.log("🔍 OFFSCREEN DEBUG: Branestawm offscreen document loaded and ready for messages");console.log("🔍 OFFSCREEN DEBUG: Auto-initialization will trigger after transformers.js loads");
