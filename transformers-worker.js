console.log("🔍 WORKER: Transformers.js worker starting (local build)...");let t=null,a=null,n=null,i=null;try{console.log("🔍 WORKER: Loading local transformers.js..."),importScripts("./transformers.min.js"),console.log("🔍 WORKER: Local transformers.js loaded successfully!")}catch(r){console.error("🔍 WORKER: Failed to load local transformers.js:",r),postMessage({type:"error",error:"Failed to load transformers.js: "+r.message})}self.addEventListener("message",async r=>{const{type:o,data:e}=r.data;console.log(`🔍 WORKER: Received message: ${o}`);try{if(o==="init"){console.log("🔍 WORKER: Initializing AI models...");const s=e.extensionBaseURL;console.log("🔍 WORKER: Extension base URL:",s),typeof Transformers<"u"&&Transformers.env&&(Transformers.env.backends.onnx.wasm.wasmPaths=s,console.log("🔍 WORKER: WASM paths configured for local loading"));try{postMessage({type:"status",message:"Loading classifier model...",progress:20}),console.log("🔍 WORKER: Loading classifier (The Scout)..."),t=await Transformers.pipeline("zero-shot-classification","Xenova/distilbert-base-uncased-mnli"),console.log("🔍 WORKER: Classifier loaded"),postMessage({type:"status",message:"Loading embedding model...",progress:40}),console.log("🔍 WORKER: Loading embedder (The Indexer)..."),a=await Transformers.pipeline("feature-extraction","Xenova/all-MiniLM-L6-v2"),console.log("🔍 WORKER: Embedder loaded"),postMessage({type:"status",message:"Loading NER model...",progress:60}),console.log("🔍 WORKER: Loading NER extractor (The Extractor)..."),n=await Transformers.pipeline("ner","Xenova/distilbert-base-multilingual-cased-ner-hrl"),console.log("🔍 WORKER: NER extractor loaded"),postMessage({type:"status",message:"Loading generative model...",progress:80}),console.log("🔍 WORKER: Loading generator (The Synthesizer)..."),i=await Transformers.pipeline("text-generation","Xenova/gemma-2b-it"),console.log("🔍 WORKER: Generator loaded"),postMessage({type:"init-complete",success:!0,progress:100}),console.log("🔍 WORKER: All AI models initialized successfully!")}catch(l){console.error("🔍 WORKER: Model initialization failed:",l),postMessage({type:"init-complete",success:!1,error:l.message})}}else if(o==="classify"){if(!t)throw new Error("Classifier not initialized");console.log("🔍 WORKER: Running classification...");const s=await t(e.text,e.labels);postMessage({type:"classify-result",id:e.id,result:s})}else if(o==="embed"){if(!a)throw new Error("Embedder not initialized");console.log("🔍 WORKER: Generating embedding...");const s=await a(e.text);postMessage({type:"embed-result",id:e.id,embedding:s.data})}else if(o==="extract_entities"){if(!n)throw new Error("NER extractor not initialized");console.log("🔍 WORKER: Extracting entities...");const s=await n(e.text);postMessage({type:"entities-result",id:e.id,entities:s})}else if(o==="generate"){if(!i)throw new Error("Generator not initialized");console.log("🔍 WORKER: Generating text...");const s=await i(e.prompt,{max_length:e.maxLength||100,temperature:e.temperature||.7,...e.options});postMessage({type:"generate-result",id:e.id,text:s[0].generated_text})}else console.log("🔍 WORKER: Unknown message type:",o)}catch(s){console.error("🔍 WORKER: Error processing message:",s),postMessage({type:"error",id:e==null?void 0:e.id,error:s.message})}});console.log("🔍 WORKER: Transformers.js worker ready for messages (local build)");
